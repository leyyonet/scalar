   // alpha
    // this._helper.patternCheck(inner, (opt.pattern as RegExp))

    /*
    title
    *     ly_cast(value: scalar.Unknown, opt?: O, req?: Req): T | null {
        opt = this._option(opt);
        const inner = primitiveState.string(value);
        if ((inner.status === true) && this._helper.hasHtmlTag(inner.value)) {
            if (opt.stripTags) {
                inner.value = this._helper.stripTagsAll(inner.value);
                if (inner.value === null) {
                    primitiveState.invalid(inner, false);
                }
            } else {
                primitiveState.invalid(inner, 'has-html-tags');
            }
        }
        if ((inner.status === true) && this._helper.hasNewLine(inner.value)) {
            if (opt.cropNewLines) {
                const lines = primitiveCast.stringArray((inner.value as string).split(/\r?\n/));
                inner.value = lines.length > 0 ? lines[0] : null;
                if (inner.value === null) {
                    primitiveState.invalid(inner, false);
                }
            } else {
                primitiveState.invalid(inner, 'has-new-line');
            }
        }
        if ((inner.status === true) && this._helper.lengthCheck(inner, opt)) {
            return inner.value;
        }
        this._anyError(opt, inner, value);
        return (typeof opt.def === 'string') ? opt.def : null;
    }

    * */

    /*
    * RegExp
    *     ly_cast(value: scalar.Unknown, opt?: O, req?: Req): T | null {
        opt = this._option(opt);
        const inner = primitiveState.init<T>(null);
        if (value !== null) {
            switch (typeof value) {
                case 'string':
                    const innerStr = primitiveState.string(value);
                    if (innerStr.status === true) {
                        try {
                            return new RegExp(innerStr.value, '');
                        } catch (e) {
                            primitiveState.error(inner, 'error-pattern', e);
                        }
                    }
                    break;
                case 'object':
                    if (Array.isArray(value)) {
                        return this.ly_cast(value[0], opt, req);
                    }
                    if (value instanceof RegExp) {
                        return value;
                    } else {
                        primitiveState.invalid(inner, 'invalid-object');
                    }
                    break;
                case 'function':
                    try {
                        return this.ly_cast(value(), opt, req);
                    } catch (e) {
                        primitiveState.error(inner, 'error-callback', e);
                    }
            }
        }
        if (inner.status === true) {
            return inner.value;
        }
        this._anyError(opt, inner, value);
        return (opt.def instanceof RegExp) ? opt.def : null;
    }
    * */
    /*
    *     // region validations
    lengthCheck(inner: ScalarInner<string>, opt: ScalarOptDefText): boolean {
        if (inner.value === null) {
            return true;
        }
        if (typeof opt.minLength === 'number' && opt.minLength > inner.value.length) {
            if (Array.isArray(inner.errors[opt.title])) {
                inner.errors[opt.title].push(new DeveloperException('Min Length'));
            } else {
                inner.errors[opt.title] = [new DeveloperException('Min Length')];
            }
            return false;
        }
        if (typeof opt.maxLength === 'number' && opt.maxLength < inner.value.length) {
            if (opt.cropMax) {
                inner.value = inner.value.substring(0, opt.maxLength);
            } else {
                if (Array.isArray(inner.errors[opt.title])) {
                    inner.errors[opt.title].push(new DeveloperException('Max Length'));
                } else {
                    inner.errors[opt.title] = [new DeveloperException('Max Length')];
                }
                return false;
            }
        }
        return true;
    }

    numberRangeCheck(inner: ScalarInner<number>, opt: ScalarOptDefNumber): boolean {
        if (inner.value === null) {
            return true;
        }
        if (typeof opt.min === 'number' && opt.min > inner.value) {
            if (opt.cropMin) {
                inner.value = opt.min;
            } else {
                if (Array.isArray(inner.errors[opt.title])) {
                    inner.errors[opt.title].push(new DeveloperException('Min value'));
                } else {
                    inner.errors[opt.title] = [new DeveloperException('Min value')];
                }
                return false;
            }
        }
        if (typeof opt.max === 'number' && opt.max < inner.value) {
            if (opt.cropMax) {
                inner.value = opt.max;
            } else {
                if (Array.isArray(inner.errors[opt.title])) {
                    inner.errors[opt.title].push(new DeveloperException('Max value'));
                } else {
                    inner.errors[opt.title] = [new DeveloperException('Max value')];
                }
                return false;
            }
        }
        return true;
    }

    patternCheck(inner: ScalarInner<string>, opt: ScalarOptDefExp): boolean {
        try {
            if ((opt.pattern as RegExp).test(inner.value as string)) {
                return true;
            } else {
                inner.errors[opt.title] = [new DeveloperException('invalid pattern')];
            }
        } catch (e) {
            inner.errors[opt.title] = [new DeveloperException('invalid pattern').withCause(e)];
        }
        return false;
    }
    buildPattern(pattern: string|RegExp, def?: RegExp): RegExp {
        if (typeof pattern === 'string') {
            return new RegExp(pattern, 'i');
        } else if (!(typeof opt.pattern === 'object' && opt.pattern instanceof RegExp)) {
            opt.pattern = AlphaType._PATTERN;
        }

    }
* */
//     stripTags(input: scalar.String, allowed: Array<scalar.Alpha>): scalar.String {
//         allowed = allowed.map(tag => tag.toLowerCase());
//         // allowed = allowed.filter(tag => /[a-z][a-z0-9\-]*/g.test(tag));
//     const pattern = /<\/?([a-z][a-z0-9|-]*)\b[^>]*>/gi;
//     return primitiveCast.string(input.replace(pattern, ($0, $1) => allowed.includes($1.toLowerCase()) ? $0 : '').trim());
// }
//
// stripTagsAll(value: scalar.String): scalar.String {
//     return primitiveCast.string(value.replace(/<\/?[^>]+(>|$)/g, '').trim());
// }
//
// hasNewLine(str: string): boolean {
//     return typeof str === 'string' && str.search(ScalarHelper._NEW_LINE_PATTERN) > 0;
// }
//
// hasHtmlTag(str: string): boolean {
//     return typeof str === 'string' && ScalarHelper._HTML_PATTERN.test(str);
// }
// endregion validations

/**
 *             const ext = /(?:\.([^.]+))?$/.exec(__filename) as unknown as string;
 *             const importList = [] as Array<Promise<unknown>>;
 *             fs.readdirSync(__dirname + '/casts').forEach(file => {
 *                 if (file.endsWith(ext)) {
 *                     importList.push(require(file));
 *                 }
 *             });
 *             if (importList.length > 0) {
 *                 Promise.all(importList).then();
 *             }
 * */